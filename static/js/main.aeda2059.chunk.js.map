{"version":3,"sources":["CounterComponents/CurrentValueScreen/CurrentValueScreen.module.css","CounterComponents/SetValueRangeFields/SetValueRangeFields.module.css","CounterComponents/InputNumber/InputNumber.module.css","CounterComponents/Counter/Counter.module.css","CounterComponents/ButtonsContainer/ButtonsContainer.module.css","App.module.css","CounterComponents/Button/Button.module.css","CounterComponents/CurrentValueScreen/CurrentValueScreen.tsx","CounterComponents/Button/Button.tsx","CounterComponents/ButtonsContainer/ButtonsContainer.tsx","CounterComponents/SetValueButtons/SetValueButtons.tsx","CounterComponents/InputNumber/InputNumber.tsx","CounterComponents/SetValueRangeFields/SetValueRangeFields.tsx","CounterComponents/SetValueRangeButton/SetValuesRangeButton.tsx","CounterComponents/Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","CurrentValue","props","Number","isInteger","currentValue","maxValue","className","s","counterBoardMax","counterBoard","counterBoardText","error","counterBoardErrorText","CurrentValueScreen","counterBoardError","Button","type","value","onClick","disabled","ButtonsContainer","children","Buttons","SetValueButtons","inc","incDisable","reset","resetDisable","InputNumber","onChange","input","SetValueRangeFields","fieldsContainer","field","text","event","eventNumber","currentTarget","checkMaxValue","maxValueInputRed","fieldStyle","inputRed","startValue","checkStartValue","startValueInputRed","SetValuesRangeButton","setValuesLocalStorage","setButtonDisable","Counter","maxValueState","valueAsString","localStorage","getItem","JSON","parse","startValueState","useState","setCurrentValue","setMaxValue","setStartValue","resetFunc","maxValueFromLocalStorage","setMaxValueFromLocalStorage","startValueFromLocalStorage","setStartValueFromLocalStorage","okText","errorText","counterContainer","counterBody","setItem","stringify","maxValueAsString","startValueAsString","App","background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aeda2059.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterBoard\":\"CurrentValueScreen_counterBoard__6RJZI\",\"counterBoardMax\":\"CurrentValueScreen_counterBoardMax__2xmif\",\"counterBoardText\":\"CurrentValueScreen_counterBoardText__2-rE1\",\"counterBoardErrorText\":\"CurrentValueScreen_counterBoardErrorText__2UkMz\",\"counterBoardError\":\"CurrentValueScreen_counterBoardError__2zSSa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldsContainer\":\"SetValueRangeFields_fieldsContainer__2lga5\",\"field\":\"SetValueRangeFields_field__dn9z2\",\"text\":\"SetValueRangeFields_text__2aYud\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"InputNumber_input__3oeJz\",\"inputRed\":\"InputNumber_inputRed__iCV1K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterContainer\":\"Counter_counterContainer__3aSRv\",\"counterBody\":\"Counter_counterBody__17qrq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ButtonsContainer\":\"ButtonsContainer_ButtonsContainer__3xPLX\",\"Buttons\":\"ButtonsContainer_Buttons__WeJI3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"App_background__3t9sW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__18Kez\"};","import React from 'react';\nimport s from './CurrentValueScreen.module.css';\n\ntype currentValueType = {\n    currentValue: number | string\n    maxValue: number\n    error: boolean\n}\n\nfunction CurrentValue(props:currentValueType) {\n    if (Number.isInteger(props.currentValue)) {\n        if (props.currentValue >= props.maxValue) {\n            return <span className={s.counterBoardMax}>\n                {props.currentValue}\n            </span>\n        } else {\n            return <span className={s.counterBoard}>\n                {props.currentValue}\n            </span>\n        }\n    } else {\n        return (\n            <span className={`${s.counterBoardText} ${props.error ? s.counterBoardErrorText : ''}`}>\n                {props.currentValue}\n            </span>\n        )\n    }\n}\n\nexport function CurrentValueScreen(props: currentValueType) {\n    return (\n        <div className={props.error ? s.counterBoardError : s.counterBoard}>\n            <CurrentValue currentValue={props.currentValue} maxValue={props.maxValue} error={props.error}/>\n        </div>\n    )\n}","import React from 'react';\r\nimport s from './Button.module.css';\r\n\r\ntype ButtonPropsType = {\r\n    value: string\r\n    className?: string\r\n    onClick: () => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport function Button(props: ButtonPropsType) {\r\n    return (\r\n        <button type=\"button\"\r\n                value={props.value}\r\n                className={`${props.className} ${s.Button}`}\r\n                onClick={props.onClick}\r\n                disabled={props.disabled}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    )\r\n}","import React from 'react';\r\nimport s from './ButtonsContainer.module.css';\r\n\r\nexport const ButtonsContainer: React.FC = ({ children }) => {\r\n    return (\r\n        <div className={s.ButtonsContainer}>\r\n            <div className={s.Buttons}>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport s from '../Button/Button.module.css';\nimport {Button} from \"../Button/Button\";\nimport {ButtonsContainer} from \"../ButtonsContainer/ButtonsContainer\";\n\ntype CounterButtonsType = {\n    inc: () => void\n    reset: () => void\n    incDisable: boolean\n    resetDisable: boolean\n}\n\nexport function SetValueButtons(props: CounterButtonsType) {\n    return (\n        <ButtonsContainer>\n            <Button onClick={ () => {props.inc()} }\n                    value={\"inc\"}\n                    disabled={props.incDisable}\n            />\n            <Button onClick={ () => {props.reset()} }\n                    value={\"reset\"}\n                    disabled={props.resetDisable}/>\n        </ButtonsContainer>\n    );\n}","import React, {ChangeEvent} from 'react';\r\nimport s from './InputNumber.module.css'\r\n\r\ntype InputNumberType = {\r\n    type: string\r\n    value: number\r\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void\r\n    className?: string\r\n    disabled?: boolean\r\n}\r\n\r\nexport function InputNumber(props: InputNumberType) {\r\n    return (\r\n        <input type={props.type}\r\n               value={props.value}\r\n               onChange={props.onChange}\r\n               className={`${props.className} ${s.input}`}\r\n               disabled={props.disabled}\r\n        />\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\nimport s from './SetValueRangeFields.module.css';\nimport fieldStyle from '../InputNumber/InputNumber.module.css'\nimport {InputNumber} from \"../InputNumber/InputNumber\";\n\ntype SetValueRangeFieldsType = {\n    maxValue: number\n    startValue: number\n    checkMaxValue: (eventNumber: number) => void\n    checkStartValue: (eventNumber: number) => void\n    maxValueInputRed: boolean\n    startValueInputRed: boolean\n}\n\nexport function SetValueRangeFields(props: SetValueRangeFieldsType) {\n    const checkMaxValue = (event: ChangeEvent<HTMLInputElement>) => {\n        const eventNumber = Number(event.currentTarget.value)\n        props.checkMaxValue(eventNumber)\n    }\n    const checkStartValue = (event: ChangeEvent<HTMLInputElement>) => {\n        const eventNumber = Number(event.currentTarget.value)\n        props.checkStartValue(eventNumber)\n    }\n\n    return (\n        <div className={s.fieldsContainer}>\n            <div className={s.field}>\n                <div className={s.text}>max value:</div>\n                <InputNumber type={\"number\"}\n                             value={props.maxValue}\n                             onChange={checkMaxValue}\n                             className={props.maxValueInputRed ? fieldStyle.inputRed : ''}\n                />\n            </div>\n            <div className={s.field}>\n                <div className={s.text}>start value:</div>\n                <InputNumber type={\"number\"}\n                             value={props.startValue}\n                             onChange={checkStartValue}\n                             className={props.startValueInputRed ? fieldStyle.inputRed : ''}\n                />\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport s from './SetValueRangeButton.module.css';\nimport {Button} from \"../Button/Button\";\nimport {ButtonsContainer} from \"../ButtonsContainer/ButtonsContainer\";\n\ntype SetValuesRangeButtonPropsType = {\n    setButtonDisable: boolean\n    setValuesLocalStorage: () => void\n}\n\nexport function SetValuesRangeButton(props: SetValuesRangeButtonPropsType) {\n\n    return (\n        <ButtonsContainer>\n            <Button value={\"set\"}\n                    onClick={props.setValuesLocalStorage}\n                    disabled={props.setButtonDisable}\n            />\n        </ButtonsContainer>\n    );\n}","import React, {useState} from 'react';\r\nimport s from './Counter.module.css';\r\nimport {CurrentValueScreen} from '../CurrentValueScreen/CurrentValueScreen';\r\nimport {SetValueButtons} from \"../SetValueButtons/SetValueButtons\";\r\nimport {SetValueRangeFields} from '../SetValueRangeFields/SetValueRangeFields';\r\nimport {SetValuesRangeButton} from \"../SetValueRangeButton/SetValuesRangeButton\";\r\n\r\nfunction Counter() {\r\n    const maxValueState = function () {\r\n        const valueAsString = localStorage.getItem(\"MaxValue\");\r\n        if (valueAsString) {\r\n            return JSON.parse(valueAsString)\r\n        } else return 5\r\n    }\r\n    const startValueState = function () {\r\n        const valueAsString = localStorage.getItem(\"StartValue\");\r\n        if (valueAsString) {\r\n            return JSON.parse(valueAsString)\r\n        } else return 0\r\n    }\r\n\r\n    const [currentValue, setCurrentValue] = useState<number | string>(startValueState())\r\n    const [maxValue, setMaxValue] = useState<number>(maxValueState())\r\n    const [startValue, setStartValue] = useState<number>(startValueState())\r\n\r\n    const incFunc = function () {\r\n        if (Number.isInteger(currentValue)) {\r\n            setCurrentValue(+currentValue + 1)\r\n        } else {\r\n            setCurrentValue(startValue + 1)\r\n        }\r\n    }\r\n    const resetFunc = function () {\r\n        setCurrentValue(startValueState())\r\n    }\r\n\r\n    // useStates for button disabling condition\r\n    const [maxValueFromLocalStorage, setMaxValueFromLocalStorage] = useState<number>(maxValueState())\r\n    const [startValueFromLocalStorage, setStartValueFromLocalStorage] = useState<number>(startValueState())\r\n\r\n    const setValuesLocalStorage = function () {\r\n        localStorage.setItem(\"MaxValue\", JSON.stringify(maxValue))\r\n        localStorage.setItem(\"StartValue\", JSON.stringify(startValue))\r\n        setCurrentValue(startValue)\r\n\r\n        // for button disabling condition\r\n        const maxValueAsString = localStorage.getItem(\"MaxValue\")\r\n        if (maxValueAsString) {\r\n            setMaxValueFromLocalStorage(JSON.parse(maxValueAsString))\r\n        }\r\n        const startValueAsString = localStorage.getItem(\"StartValue\")\r\n        if (startValueAsString) {\r\n            setStartValueFromLocalStorage(JSON.parse(startValueAsString))\r\n        }\r\n    }\r\n\r\n    const okText = \"Enter values and press 'set'\"\r\n    const errorText = \"Incorrect value!\"\r\n    const checkMaxValue = function (value: number) {\r\n        if (value <= startValue || startValue < 0 || value <= 0) {\r\n            setCurrentValue(errorText)\r\n            setMaxValue(value)\r\n        } else {\r\n            if (maxValueFromLocalStorage === value &&\r\n                startValueFromLocalStorage === startValue) {\r\n                setMaxValue(value)\r\n                resetFunc()\r\n            } else {\r\n                setMaxValue(value)\r\n                setCurrentValue(okText)\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkStartValue = function (value: number) {\r\n        if (value >= maxValue || value < 0) {\r\n            setCurrentValue(errorText)\r\n            setStartValue(value)\r\n        } else {\r\n            if (maxValueFromLocalStorage === maxValue &&\r\n                startValueFromLocalStorage === value) {\r\n                setStartValue(value)\r\n                resetFunc()\r\n            } else {\r\n                setStartValue(value)\r\n                setCurrentValue(okText)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.counterContainer}>\r\n            <div className={s.counterBody}>\r\n                <SetValueRangeFields maxValue={maxValue}\r\n                                     startValue={startValue}\r\n                                     checkMaxValue={checkMaxValue}\r\n                                     checkStartValue={checkStartValue}\r\n                                     maxValueInputRed={\r\n                                         maxValue <= startValue ||\r\n                                         maxValue <= 0}\r\n                                     startValueInputRed={\r\n                                         startValue < 0 ||\r\n                                         maxValue <= startValue\r\n                                     }\r\n                />\r\n                <SetValuesRangeButton setValuesLocalStorage={setValuesLocalStorage}\r\n                                      setButtonDisable={\r\n                                          maxValueFromLocalStorage === maxValue &&\r\n                                          startValueFromLocalStorage === startValue ||\r\n                                          startValue < 0 ||\r\n                                          maxValue <= startValue\r\n                                      }\r\n                />\r\n            </div>\r\n\r\n            <div className={s.counterBody}>\r\n                <CurrentValueScreen currentValue={currentValue}\r\n                                    maxValue={maxValue}\r\n                                    error={\r\n                                        maxValue <= startValue ||\r\n                                        maxValue <= 0 ||\r\n                                        startValue < 0 ||\r\n                                        maxValue <= startValue\r\n                                    }\r\n                />\r\n                <SetValueButtons inc={incFunc}\r\n                                 reset={resetFunc}\r\n                                 incDisable={\r\n                                     currentValue < startValue ||\r\n                                     currentValue >= maxValue ||\r\n                                     startValue < 0 ||\r\n                                     maxValue <= startValue ||\r\n                                     maxValueFromLocalStorage !== maxValue ||\r\n                                     startValueFromLocalStorage !== startValue\r\n                                 }\r\n                                 resetDisable={\r\n                                     currentValue <= startValue ||\r\n                                     currentValue === 0 ||\r\n                                     startValue < 0 ||\r\n                                     maxValue <= startValue ||\r\n                                     maxValueFromLocalStorage !== maxValue ||\r\n                                     startValueFromLocalStorage !== startValue\r\n                                 }\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Counter;","import React from 'react';\nimport s from './App.module.css';\nimport Counter from './CounterComponents/Counter/Counter';\n\nfunction App() {\n    return (\n        <div className={s.background}>\n            <Counter/>\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}