{"version":3,"sources":["counterButtons/counterButtons.module.css","counterBoard/counterBoard.module.css","App.module.css","Counter/Counter.module.css","counterBoard/counterBoard.tsx","counterButtons/counterButtons.tsx","Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","CurrentValue","props","number","className","s","counterBoardMax","counterBoard","CounterBoard","count","CounterButtons","counterButtonContainer","ButtonsContainer","onClick","inc","disabled","inc_btn","disable_btn","reset","reset_btn","Counter","useState","setCount","counterBody","App","background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,uBAAyB,+CAA+C,iBAAmB,yCAAyC,QAAU,gCAAgC,UAAY,kCAAkC,YAAc,sC,gBCA5PD,EAAOC,QAAU,CAAC,aAAe,mCAAmC,gBAAkB,wC,kBCAtFD,EAAOC,QAAU,CAAC,WAAa,0B,gBCA/BD,EAAOC,QAAU,CAAC,YAAc,+B,sKCMhC,SAASC,EAAaC,GAClB,OAAIA,EAAMC,QAAU,EACT,sBAAMC,UAAWC,IAAEC,gBAAnB,SAAqCJ,EAAMC,SAE3C,sBAAMC,UAAWC,IAAEE,aAAnB,SAAkCL,EAAMC,SAQhD,SAASK,EAAaN,GACzB,OACI,qBAAKE,UAAWC,IAAEE,aAAlB,SACI,cAACN,EAAD,CAAcE,OAAQD,EAAMO,U,oBCbjC,SAASC,EAAeR,GAC3B,OACI,qBAAKE,UAAWC,IAAEM,uBAAlB,SACI,sBAAKP,UAAWC,IAAEO,iBAAlB,UACI,wBAAQC,QAAU,WAAOX,EAAMY,OAC1BC,SAAUb,EAAMO,OAAS,EACzBL,UAAWC,IAAEW,QAAU,KAAOd,EAAMO,OAAS,EAAIJ,IAAEY,YAAc,IAFtE,iBAGA,wBAAQJ,QAAU,WAAOX,EAAMgB,SAC1BH,SAAUb,EAAMO,OAAS,EACzBL,UAAWC,IAAEc,UAAY,KAAuB,IAAhBjB,EAAMO,MAAcJ,IAAEY,YAAc,IAFzE,wBCQDG,MAnBf,WAAoB,IAAD,EACSC,mBAAS,GADlB,mBACVZ,EADU,KACHa,EADG,KAWf,OACI,sBAAKlB,UAAWC,IAAEkB,YAAlB,UACI,cAACf,EAAD,CAAcC,MAAOA,IACrB,cAACC,EAAD,CAAgBI,IAXV,WACVQ,EAASb,EAAQ,IAUiBS,MAPtB,WACZI,EAAS,IAM2Cb,MAAOA,QCPpDe,MARf,WACI,OACI,qBAAKpB,UAAWC,IAAEoB,WAAlB,SACI,cAAC,EAAD,OCOGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2614ab06.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterButtonContainer\":\"counterButtons_counterButtonContainer__2sSoH\",\"ButtonsContainer\":\"counterButtons_ButtonsContainer__11Xtx\",\"inc_btn\":\"counterButtons_inc_btn__sOcny\",\"reset_btn\":\"counterButtons_reset_btn__22RA-\",\"disable_btn\":\"counterButtons_disable_btn__2wZqG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterBoard\":\"counterBoard_counterBoard__3s2-M\",\"counterBoardMax\":\"counterBoard_counterBoardMax__gd61_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"App_background__3t9sW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterBody\":\"Counter_counterBody__3YMsk\"};","import React from 'react';\nimport s from './counterBoard.module.css';\n\ntype currentValueType = {\n    number: number\n}\n\nfunction CurrentValue(props:currentValueType) {\n    if (props.number >= 5) {\n        return <span className={s.counterBoardMax}>{props.number}</span>\n    } else {\n        return <span className={s.counterBoard}>{props.number}</span>\n    }\n}\n\ntype CounterBoardType = {\n    count: number\n}\n\nexport function CounterBoard(props: CounterBoardType) {\n    return (\n        <div className={s.counterBoard}>\n            <CurrentValue number={props.count} />\n        </div>\n    )\n}","import React from 'react';\nimport s from './counterButtons.module.css';\n\ntype CounterButtonsType = {\n    inc: () => void\n    reset: () => void\n    count: number\n}\n\nexport function CounterButtons(props: CounterButtonsType) {\n    return (\n        <div className={s.counterButtonContainer}>\n            <div className={s.ButtonsContainer}>\n                <button onClick={ () => {props.inc()} }\n                     disabled={props.count >= 5}\n                     className={s.inc_btn + ' ' + (props.count >= 5 ? s.disable_btn : '')}>inc</button>\n                <button onClick={ () => {props.reset()} }\n                     disabled={props.count <= 1}\n                     className={s.reset_btn + ' ' + (props.count === 1 ? s.disable_btn : '')}>reset</button>\n            </div>\n        </div>\n    );\n}","import React, {useState} from 'react';\r\nimport s from './Counter.module.css';\r\nimport {CounterBoard} from '../counterBoard/counterBoard';\r\nimport {CounterButtons} from \"../counterButtons/counterButtons\";\r\n\r\nfunction Counter() {\r\n    let [count, setCount] = useState(1)\r\n\r\n    let incFunc = function () {\r\n        setCount(count + 1)\r\n    }\r\n\r\n    let resetFunc = function () {\r\n        setCount(1)\r\n    }\r\n\r\n    return (\r\n        <div className={s.counterBody}>\r\n            <CounterBoard count={count}/>\r\n            <CounterButtons inc={incFunc} reset={resetFunc} count={count}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Counter;","import React from 'react';\nimport s from './App.module.css';\nimport Counter from './Counter/Counter';\n\nfunction App() {\n    return (\n        <div className={s.background}>\n            <Counter/>\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}