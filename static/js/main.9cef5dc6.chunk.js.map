{"version":3,"sources":["CounterComponents/CurrentValueScreen/CurrentValueScreen.module.css","CounterComponents/SetValueRangeFields/SetValueRangeFields.module.css","CounterComponents/InputNumber/InputNumber.module.css","CounterComponents/Counter/Counter.module.css","CounterComponents/ButtonsContainer/ButtonsContainer.module.css","App.module.css","CounterComponents/Button/Button.module.css","CounterComponents/CurrentValueScreen/CurrentValueScreen.tsx","CounterComponents/Button/Button.tsx","CounterComponents/ButtonsContainer/ButtonsContainer.tsx","CounterComponents/SetValueButtons/SetValueButtons.tsx","CounterComponents/InputNumber/InputNumber.tsx","CounterComponents/SetValueRangeFields/SetValueRangeFields.tsx","CounterComponents/SetValueRangeButton/SetValuesRangeButton.tsx","Redux/GlobalReducer.ts","CounterComponents/Counter/Counter.tsx","App.tsx","reportWebVitals.ts","Redux/ReduxStore.ts","index.tsx"],"names":["module","exports","CurrentValue","props","currentValueEqualMaxValue","currentValue","maxValue","s","counterBoardMax","undefined","className","counterBoard","errorMessage","counterBoardText","counterBoardErrorText","CurrentValueScreen","startValue","counterBoardError","Button","type","value","onClick","disabled","ButtonsContainer","children","Buttons","SetValueButtons","inc","incDisable","reset","resetDisable","InputNumber","onChange","input","SetValueRangeFields","fieldsContainer","field","text","event","eventNumber","Number","currentTarget","checkMaxValue","maxValueInputRed","fieldStyle","inputRed","checkStartValue","startValueInputRed","SetValuesRangeButton","setValuesLocalStorage","setButtonDisable","SET_MAX_VALUE_TYPE","SET_START_VALUE_TYPE","SET_CURRENT_VALUE_TYPE","initialState","setMaxValueAC","setStartValueAC","setCurrentValueAC","Counter","dispatch","useDispatch","useSelector","state","globalReducer","useEffect","valueAsString","localStorage","getItem","JSON","parse","maxValueState","startValueState","error","counterContainer","counterBody","setItem","stringify","App","background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RootReducer","combineReducers","action","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9cef5dc6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterBoard\":\"CurrentValueScreen_counterBoard__6RJZI\",\"counterBoardMax\":\"CurrentValueScreen_counterBoardMax__2xmif\",\"counterBoardText\":\"CurrentValueScreen_counterBoardText__2-rE1\",\"counterBoardErrorText\":\"CurrentValueScreen_counterBoardErrorText__2UkMz\",\"counterBoardError\":\"CurrentValueScreen_counterBoardError__2zSSa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldsContainer\":\"SetValueRangeFields_fieldsContainer__2lga5\",\"field\":\"SetValueRangeFields_field__dn9z2\",\"text\":\"SetValueRangeFields_text__2aYud\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"InputNumber_input__3oeJz\",\"inputRed\":\"InputNumber_inputRed__iCV1K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterContainer\":\"Counter_counterContainer__3aSRv\",\"counterBody\":\"Counter_counterBody__17qrq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ButtonsContainer\":\"ButtonsContainer_ButtonsContainer__3xPLX\",\"Buttons\":\"ButtonsContainer_Buttons__WeJI3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"App_background__3t9sW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__18Kez\"};","import React from \"react\";\r\nimport s from \"./CurrentValueScreen.module.css\";\r\n\r\ntype currentValueType = {\r\n    currentValue: number | undefined\r\n    errorMessage: string\r\n    maxValue: number\r\n    startValue: number\r\n}\r\n\r\ntype currentValueScreenType = {\r\n    currentValue: number | undefined\r\n    maxValue: number\r\n    startValue: number\r\n}\r\n\r\nfunction CurrentValue(props: currentValueType) {\r\n    const currentValueEqualMaxValue = props.currentValue === props.maxValue ? s.counterBoardMax : \"\";\r\n\r\n    if (props.currentValue !== undefined) {\r\n        return <span className={s.counterBoard}>\r\n                <span className={currentValueEqualMaxValue}>{props.currentValue}</span>\r\n            </span>\r\n    } else if (props.errorMessage === \"\") {\r\n        return <span className={s.counterBoardText}>Enter values and press 'set'</span>\r\n    } else return <span className={s.counterBoardErrorText}>{props.errorMessage}</span>\r\n}\r\n\r\nexport function CurrentValueScreen(props: currentValueScreenType) {\r\n    let errorMessage = \"\";\r\n    if (props.startValue < 0 || props.maxValue <= props.startValue) {\r\n        errorMessage = \"Incorrect value!\"\r\n    }\r\n\r\n    return (\r\n        <div className={errorMessage === \"\" ? s.counterBoard : s.counterBoardError}>\r\n            <CurrentValue currentValue={props.currentValue}\r\n                          maxValue={props.maxValue}\r\n                          startValue={props.startValue}\r\n                          errorMessage={errorMessage}/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./Button.module.css\";\r\n\r\ntype ButtonPropsType = {\r\n    value: string\r\n    className?: string\r\n    onClick: () => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport function Button(props: ButtonPropsType) {\r\n    return (\r\n        <button type=\"button\"\r\n                value={props.value}\r\n                className={`${props.className} ${s.Button}`}\r\n                onClick={props.onClick}\r\n                disabled={props.disabled}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./ButtonsContainer.module.css\";\r\n\r\nexport const ButtonsContainer: React.FC = ({children}) => {\r\n    return (\r\n        <div className={s.ButtonsContainer}>\r\n            <div className={s.Buttons}>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\nimport { Button } from \"../Button/Button\";\nimport { ButtonsContainer } from \"../ButtonsContainer/ButtonsContainer\";\n\ntype CounterButtonsType = {\n    inc: () => void\n    reset: () => void\n    incDisable: boolean\n    resetDisable: boolean\n}\n\nexport function SetValueButtons(props: CounterButtonsType) {\n    return (\n        <ButtonsContainer>\n            <Button onClick={props.inc}\n                    value={\"inc\"}\n                    disabled={props.incDisable}\n            />\n            <Button onClick={props.reset}\n                    value={\"reset\"}\n                    disabled={props.resetDisable}/>\n        </ButtonsContainer>\n    );\n}","import React, { ChangeEvent } from \"react\";\r\nimport s from \"./InputNumber.module.css\"\r\n\r\ntype InputNumberType = {\r\n    type: string\r\n    value: number\r\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void\r\n    className?: string\r\n    disabled?: boolean\r\n}\r\n\r\nexport function InputNumber(props: InputNumberType) {\r\n    return (\r\n        <input type={props.type}\r\n               value={props.value}\r\n               onChange={props.onChange}\r\n               className={`${props.className} ${s.input}`}\r\n               disabled={props.disabled}\r\n        />\r\n    )\r\n}","import React, { ChangeEvent } from \"react\";\r\nimport s from \"./SetValueRangeFields.module.css\";\r\nimport fieldStyle from \"../InputNumber/InputNumber.module.css\"\r\nimport { InputNumber } from \"../InputNumber/InputNumber\";\r\n\r\ntype SetValueRangeFieldsType = {\r\n    maxValue: number\r\n    startValue: number\r\n    checkMaxValue: (eventNumber: number) => void\r\n    checkStartValue: (eventNumber: number) => void\r\n    maxValueInputRed: boolean\r\n    startValueInputRed: boolean\r\n}\r\n\r\nexport function SetValueRangeFields(props: SetValueRangeFieldsType) {\r\n    const checkMaxValue = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const eventNumber = Number(event.currentTarget.value)\r\n        props.checkMaxValue(eventNumber)\r\n    }\r\n    const checkStartValue = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const eventNumber = Number(event.currentTarget.value)\r\n        props.checkStartValue(eventNumber)\r\n    }\r\n\r\n    return (\r\n        <div className={s.fieldsContainer}>\r\n            <div className={s.field}>\r\n                <div className={s.text}>max value:</div>\r\n                <InputNumber type={\"number\"}\r\n                             value={props.maxValue}\r\n                             onChange={checkMaxValue}\r\n                             className={props.maxValueInputRed ? fieldStyle.inputRed : \"\"}\r\n                />\r\n            </div>\r\n            <div className={s.field}>\r\n                <div className={s.text}>start value:</div>\r\n                <InputNumber type={\"number\"}\r\n                             value={props.startValue}\r\n                             onChange={checkStartValue}\r\n                             className={props.startValueInputRed ? fieldStyle.inputRed : \"\"}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport { Button } from \"../Button/Button\";\r\nimport { ButtonsContainer } from \"../ButtonsContainer/ButtonsContainer\";\r\n\r\ntype SetValuesRangeButtonPropsType = {\r\n    setButtonDisable: boolean\r\n    setValuesLocalStorage: () => void\r\n}\r\n\r\nexport function SetValuesRangeButton(props: SetValuesRangeButtonPropsType) {\r\n\r\n    return (\r\n        <ButtonsContainer>\r\n            <Button value={\"set\"}\r\n                    onClick={props.setValuesLocalStorage}\r\n                    disabled={props.setButtonDisable}\r\n            />\r\n        </ButtonsContainer>\r\n    );\r\n}","import { ActionValuesType } from \"./ReduxStore\";\r\n\r\nexport type StateType = {\r\n    maxValue: number\r\n    startValue: number\r\n    currentValue: number | undefined\r\n}\r\n\r\nconst SET_MAX_VALUE_TYPE = \"SET-MAX-VALUE-TYPE\";\r\nconst SET_START_VALUE_TYPE = \"SET-START-VALUE-TYPE\";\r\nconst SET_CURRENT_VALUE_TYPE = \"SET-CURRENT-VALUE-TYPE\";\r\n\r\nlet initialState = {\r\n    maxValue: 5,\r\n    startValue: 0,\r\n    currentValue: undefined,\r\n}\r\n\r\nexport const GlobalReducer = (state: StateType = initialState, action: ActionValuesType): StateType => {\r\n    switch (action.type) {\r\n        case SET_MAX_VALUE_TYPE:\r\n            return {...state, maxValue: action.maxValue};\r\n        case SET_START_VALUE_TYPE:\r\n            return {...state, startValue: action.startValue};\r\n        case SET_CURRENT_VALUE_TYPE:\r\n            return {...state, currentValue: action.currentValue};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype SetMaxValueACType = {\r\n    type: typeof SET_MAX_VALUE_TYPE,\r\n    maxValue: number,\r\n}\r\ntype SetStartValueACType = {\r\n    type: typeof SET_START_VALUE_TYPE,\r\n    startValue: number,\r\n}\r\ntype SetCurrentValueACType = {\r\n    type: typeof SET_CURRENT_VALUE_TYPE,\r\n    currentValue: number | undefined,\r\n}\r\n\r\nexport const setMaxValueAC = (maxValue: number): SetMaxValueACType => ({\r\n    type: SET_MAX_VALUE_TYPE,\r\n    maxValue,\r\n});\r\nexport const setStartValueAC = (startValue: number): SetStartValueACType => ({\r\n    type: SET_START_VALUE_TYPE,\r\n    startValue,\r\n});\r\nexport const setCurrentValueAC = (currentValue: number | undefined): SetCurrentValueACType => ({\r\n    type: SET_CURRENT_VALUE_TYPE,\r\n    currentValue,\r\n});","import React, { useEffect } from \"react\";\r\nimport s from \"./Counter.module.css\";\r\nimport { CurrentValueScreen } from \"../CurrentValueScreen/CurrentValueScreen\";\r\nimport { SetValueButtons } from \"../SetValueButtons/SetValueButtons\";\r\nimport { SetValueRangeFields } from \"../SetValueRangeFields/SetValueRangeFields\";\r\nimport { SetValuesRangeButton } from \"../SetValueRangeButton/SetValuesRangeButton\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootStateType } from \"../../Redux/ReduxStore\";\r\nimport { StateType, setMaxValueAC, setStartValueAC, setCurrentValueAC } from \"../../Redux/GlobalReducer\";\r\n\r\nfunction Counter() {\r\n    const dispatch = useDispatch();\r\n    const {startValue, maxValue, currentValue} = useSelector<RootStateType, StateType>(state =>\r\n        state.globalReducer);\r\n\r\n    // useEffect on first load page: check localstorage on presence of values and set\r\n    const maxValueState = function () {\r\n        const valueAsString = localStorage.getItem(\"MaxValue\");\r\n        if (valueAsString) {\r\n            return JSON.parse(valueAsString)\r\n        } else return maxValue\r\n    }\r\n    const startValueState = function () {\r\n        const valueAsString = localStorage.getItem(\"StartValue\");\r\n        if (valueAsString) {\r\n            return JSON.parse(valueAsString)\r\n        } else return 0\r\n    }\r\n    useEffect(() => {\r\n        dispatch(setMaxValueAC(maxValueState()))\r\n        dispatch(setStartValueAC(startValueState()))\r\n    }, [])\r\n\r\n    // local error state\r\n    let error = false;\r\n    if (maxValue <= startValue || startValue < 0 || maxValue < 0) {\r\n        error = true\r\n    }\r\n\r\n    // functions\r\n    const incFunc = function () {\r\n        if (currentValue !== undefined) {\r\n            const newValue = currentValue + 1\r\n            dispatch(setCurrentValueAC(newValue))\r\n        }\r\n    }\r\n\r\n    const resetFunc = function () {\r\n        dispatch(setCurrentValueAC(startValue))\r\n    }\r\n\r\n    const setValuesLocalStorage = function () {\r\n        localStorage.setItem(\"MaxValue\", JSON.stringify(maxValue));\r\n        localStorage.setItem(\"StartValue\", JSON.stringify(startValue));\r\n        dispatch(setCurrentValueAC(startValue))\r\n    }\r\n\r\n    const checkMaxValue = function (value: number) {\r\n        dispatch(setMaxValueAC(value))\r\n        dispatch(setCurrentValueAC(undefined))\r\n    }\r\n\r\n    const checkStartValue = function (value: number) {\r\n        dispatch(setStartValueAC(value))\r\n        dispatch(setCurrentValueAC(undefined))\r\n    }\r\n\r\n    return (\r\n        <div className={s.counterContainer}>\r\n            <div className={s.counterBody}>\r\n                <SetValueRangeFields maxValue={maxValue}\r\n                                     startValue={startValue}\r\n                                     checkMaxValue={checkMaxValue}\r\n                                     checkStartValue={checkStartValue}\r\n                                     maxValueInputRed={\r\n                                         maxValue <= startValue ||\r\n                                         maxValue <= 0}\r\n                                     startValueInputRed={\r\n                                         startValue < 0 ||\r\n                                         maxValue <= startValue\r\n                                     }\r\n                />\r\n                <SetValuesRangeButton setValuesLocalStorage={setValuesLocalStorage}\r\n                                      setButtonDisable={error}\r\n                />\r\n            </div>\r\n\r\n            <div className={s.counterBody}>\r\n                <CurrentValueScreen currentValue={currentValue}\r\n                                    maxValue={maxValue}\r\n                                    startValue={startValue}\r\n                />\r\n                <SetValueButtons inc={incFunc}\r\n                                 reset={resetFunc}\r\n                                 incDisable={currentValue === maxValue || currentValue === undefined}\r\n                                 resetDisable={currentValue === startValue || currentValue === undefined}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Counter;","import React from 'react';\nimport s from './App.module.css';\nimport Counter from './CounterComponents/Counter/Counter';\n\nfunction App(props: any) {\n    return (\n        <div className={s.background}>\n            <Counter/>\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers, createStore, Store } from \"redux\";\r\nimport { setMaxValueAC, GlobalReducer, setStartValueAC, setCurrentValueAC } from \"./GlobalReducer\";\r\n\r\nexport type ActionValuesType = ReturnType<typeof setMaxValueAC>\r\n    | ReturnType<typeof setStartValueAC>\r\n    | ReturnType<typeof setCurrentValueAC>\r\n\r\nlet RootReducer = combineReducers({\r\n    globalReducer: GlobalReducer,\r\n})\r\n\r\nexport type RootStateType = ReturnType<typeof RootReducer>\r\n\r\nexport let store: Store<RootStateType, ActionValuesType> = createStore(RootReducer);","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./Redux/ReduxStore\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.getElementById(\"root\"),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}