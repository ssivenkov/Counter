{"version":3,"sources":["CounterComponents/CurrentValueScreen/CurrentValueScreen.module.css","CounterComponents/SetValueRangeFields/SetValueRangeFields.module.css","CounterComponents/InputNumber/InputNumber.module.css","CounterComponents/Counter/Counter.module.css","CounterComponents/ButtonsContainer/ButtonsContainer.module.css","App.module.css","CounterComponents/Button/Button.module.css","CounterComponents/CurrentValueScreen/CurrentValueScreen.tsx","CounterComponents/Button/Button.tsx","CounterComponents/ButtonsContainer/ButtonsContainer.tsx","CounterComponents/SetValueButtons/SetValueButtons.tsx","CounterComponents/InputNumber/InputNumber.tsx","CounterComponents/SetValueRangeFields/SetValueRangeFields.tsx","CounterComponents/SetValueRangeButton/SetValuesRangeButton.tsx","CounterComponents/Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","CurrentValue","props","currentValueCN","currentValue","maxValue","s","counterBoardMax","undefined","className","counterBoard","errorMessage","counterBoardText","counterBoardErrorText","CurrentValueScreen","startValue","counterBoardError","Button","type","value","onClick","disabled","ButtonsContainer","children","Buttons","SetValueButtons","inc","incDisable","reset","resetDisable","InputNumber","onChange","input","SetValueRangeFields","fieldsContainer","field","text","event","eventNumber","Number","currentTarget","checkMaxValue","maxValueInputRed","fieldStyle","inputRed","checkStartValue","startValueInputRed","SetValuesRangeButton","setValuesLocalStorage","setButtonDisable","Counter","useEffect","setStartValue","valueAsString","localStorage","getItem","JSON","parse","startValueState","setMaxValue","maxValueState","useState","setCurrentValue","error","counterContainer","counterBody","setItem","stringify","App","background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.807ed178.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterBoard\":\"CurrentValueScreen_counterBoard__6RJZI\",\"counterBoardMax\":\"CurrentValueScreen_counterBoardMax__2xmif\",\"counterBoardText\":\"CurrentValueScreen_counterBoardText__2-rE1\",\"counterBoardErrorText\":\"CurrentValueScreen_counterBoardErrorText__2UkMz\",\"counterBoardError\":\"CurrentValueScreen_counterBoardError__2zSSa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldsContainer\":\"SetValueRangeFields_fieldsContainer__2lga5\",\"field\":\"SetValueRangeFields_field__dn9z2\",\"text\":\"SetValueRangeFields_text__2aYud\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"InputNumber_input__3oeJz\",\"inputRed\":\"InputNumber_inputRed__iCV1K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterContainer\":\"Counter_counterContainer__3aSRv\",\"counterBody\":\"Counter_counterBody__17qrq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ButtonsContainer\":\"ButtonsContainer_ButtonsContainer__3xPLX\",\"Buttons\":\"ButtonsContainer_Buttons__WeJI3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"App_background__3t9sW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__18Kez\"};","import React from 'react';\nimport s from './CurrentValueScreen.module.css';\n\ntype currentValueType = {\n    currentValue: number | undefined\n    errorMessage: string\n    maxValue: number\n    startValue: number\n}\n\ntype currentValueScreenType = {\n    currentValue: number | undefined\n    maxValue: number\n    startValue: number\n}\n\nfunction CurrentValue(props: currentValueType) {\n    const currentValueCN = props.currentValue === props.maxValue ? s.counterBoardMax : '';\n\n    if (props.currentValue !== undefined)\n        return <span className={s.counterBoard}>\n                <span className={currentValueCN}>{props.currentValue}</span>\n            </span>\n    else if (props.errorMessage === '')\n        return <span className={s.counterBoardText}>Enter values and press 'set'</span>\n    else\n         return <span className={s.counterBoardErrorText}>{props.errorMessage}</span>\n}\n\nexport function CurrentValueScreen(props: currentValueScreenType) {\n    let errorMessage = '';\n    if (props.startValue < 0) {\n        errorMessage = \"Incorrect value!\"\n    } else if (props.maxValue <= props.startValue) {\n        errorMessage = \"Incorrect value!\"\n    }\n\n    return (\n        <div className={errorMessage === '' ? s.counterBoard : s.counterBoardError}>\n            <CurrentValue currentValue={props.currentValue}\n                          maxValue={props.maxValue}\n                          startValue={props.startValue}\n                          errorMessage={errorMessage}/>\n        </div>\n    )\n}","import React from 'react';\r\nimport s from './Button.module.css';\r\n\r\ntype ButtonPropsType = {\r\n    value: string\r\n    className?: string\r\n    onClick: () => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport function Button(props: ButtonPropsType) {\r\n    return (\r\n        <button type=\"button\"\r\n                value={props.value}\r\n                className={`${props.className} ${s.Button}`}\r\n                onClick={props.onClick}\r\n                disabled={props.disabled}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    )\r\n}","import React from 'react';\r\nimport s from './ButtonsContainer.module.css';\r\n\r\nexport const ButtonsContainer: React.FC = ({ children }) => {\r\n    return (\r\n        <div className={s.ButtonsContainer}>\r\n            <div className={s.Buttons}>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport {Button} from \"../Button/Button\";\nimport {ButtonsContainer} from \"../ButtonsContainer/ButtonsContainer\";\n\ntype CounterButtonsType = {\n    inc: () => void\n    reset: () => void\n    incDisable: boolean\n    resetDisable: boolean\n}\n\nexport function SetValueButtons(props: CounterButtonsType) {\n    return (\n        <ButtonsContainer>\n            <Button onClick={props.inc}\n                    value={\"inc\"}\n                    disabled={props.incDisable}\n            />\n            <Button onClick={props.reset}\n                    value={\"reset\"}\n                    disabled={props.resetDisable}/>\n        </ButtonsContainer>\n    );\n}","import React, {ChangeEvent} from 'react';\r\nimport s from './InputNumber.module.css'\r\n\r\ntype InputNumberType = {\r\n    type: string\r\n    value: number\r\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void\r\n    className?: string\r\n    disabled?: boolean\r\n}\r\n\r\nexport function InputNumber(props: InputNumberType) {\r\n    return (\r\n        <input type={props.type}\r\n               value={props.value}\r\n               onChange={props.onChange}\r\n               className={`${props.className} ${s.input}`}\r\n               disabled={props.disabled}\r\n        />\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\nimport s from './SetValueRangeFields.module.css';\nimport fieldStyle from '../InputNumber/InputNumber.module.css'\nimport {InputNumber} from \"../InputNumber/InputNumber\";\n\ntype SetValueRangeFieldsType = {\n    maxValue: number\n    startValue: number\n    checkMaxValue: (eventNumber: number) => void\n    checkStartValue: (eventNumber: number) => void\n    maxValueInputRed: boolean\n    startValueInputRed: boolean\n}\n\nexport function SetValueRangeFields(props: SetValueRangeFieldsType) {\n    const checkMaxValue = (event: ChangeEvent<HTMLInputElement>) => {\n        const eventNumber = Number(event.currentTarget.value)\n        props.checkMaxValue(eventNumber)\n    }\n    const checkStartValue = (event: ChangeEvent<HTMLInputElement>) => {\n        const eventNumber = Number(event.currentTarget.value)\n        props.checkStartValue(eventNumber)\n    }\n\n    return (\n        <div className={s.fieldsContainer}>\n            <div className={s.field}>\n                <div className={s.text}>max value:</div>\n                <InputNumber type={\"number\"}\n                             value={props.maxValue}\n                             onChange={checkMaxValue}\n                             className={props.maxValueInputRed ? fieldStyle.inputRed : ''}\n                />\n            </div>\n            <div className={s.field}>\n                <div className={s.text}>start value:</div>\n                <InputNumber type={\"number\"}\n                             value={props.startValue}\n                             onChange={checkStartValue}\n                             className={props.startValueInputRed ? fieldStyle.inputRed : ''}\n                />\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport s from './SetValueRangeButton.module.css';\nimport {Button} from \"../Button/Button\";\nimport {ButtonsContainer} from \"../ButtonsContainer/ButtonsContainer\";\n\ntype SetValuesRangeButtonPropsType = {\n    setButtonDisable: boolean\n    setValuesLocalStorage: () => void\n}\n\nexport function SetValuesRangeButton(props: SetValuesRangeButtonPropsType) {\n\n    return (\n        <ButtonsContainer>\n            <Button value={\"set\"}\n                    onClick={props.setValuesLocalStorage}\n                    disabled={props.setButtonDisable}\n            />\n        </ButtonsContainer>\n    );\n}","import React, {useEffect, useState} from 'react';\r\nimport s from './Counter.module.css';\r\nimport {CurrentValueScreen} from '../CurrentValueScreen/CurrentValueScreen';\r\nimport {SetValueButtons} from \"../SetValueButtons/SetValueButtons\";\r\nimport {SetValueRangeFields} from '../SetValueRangeFields/SetValueRangeFields';\r\nimport {SetValuesRangeButton} from \"../SetValueRangeButton/SetValuesRangeButton\";\r\n\r\nfunction Counter() {\r\n    const maxValueState = function () {\r\n        const valueAsString = localStorage.getItem(\"MaxValue\");\r\n        if (valueAsString) {\r\n            return JSON.parse(valueAsString)\r\n        } else return 5\r\n    }\r\n    const startValueState = function () {\r\n        const valueAsString = localStorage.getItem(\"StartValue\");\r\n        if (valueAsString) {\r\n            return JSON.parse(valueAsString)\r\n        } else return 0\r\n    }\r\n    useEffect(() => {\r\n        setStartValue(startValueState())\r\n        setMaxValue(maxValueState())\r\n    }, [])\r\n\r\n    const [currentValue, setCurrentValue] = useState<number | undefined>(undefined)\r\n    const [maxValue, setMaxValue] = useState<number>(5)\r\n    const [startValue, setStartValue] = useState<number>(0)\r\n\r\n    let error = false;\r\n    if (maxValue <= startValue || startValue < 0 || maxValue < 0) {\r\n        error = true\r\n    }\r\n\r\n    const incFunc = function () {\r\n        if (currentValue !== undefined) {\r\n            const newValue = currentValue + 1;\r\n            setCurrentValue(newValue)\r\n        }\r\n    }\r\n    const resetFunc = function () {\r\n        setCurrentValue(startValue)\r\n    }\r\n\r\n    const setValuesLocalStorage = function () {\r\n        localStorage.setItem(\"MaxValue\", JSON.stringify(maxValue))\r\n        localStorage.setItem(\"StartValue\", JSON.stringify(startValue))\r\n        setCurrentValue(startValue)\r\n    }\r\n\r\n    const checkMaxValue = function (value: number) {\r\n        setMaxValue(value)\r\n        setCurrentValue(undefined)\r\n    }\r\n\r\n    const checkStartValue = function (value: number) {\r\n        setStartValue(value)\r\n        setCurrentValue(undefined)\r\n    }\r\n\r\n    return (\r\n        <div className={s.counterContainer}>\r\n            <div className={s.counterBody}>\r\n                <SetValueRangeFields maxValue={maxValue}\r\n                                     startValue={startValue}\r\n                                     checkMaxValue={checkMaxValue}\r\n                                     checkStartValue={checkStartValue}\r\n                                     maxValueInputRed={\r\n                                         maxValue <= startValue ||\r\n                                         maxValue <= 0}\r\n                                     startValueInputRed={\r\n                                         startValue < 0 ||\r\n                                         maxValue <= startValue\r\n                                     }\r\n                />\r\n                <SetValuesRangeButton setValuesLocalStorage={setValuesLocalStorage}\r\n                                      setButtonDisable={error}\r\n                />\r\n            </div>\r\n\r\n            <div className={s.counterBody}>\r\n                <CurrentValueScreen currentValue={currentValue}\r\n                                    maxValue={maxValue}\r\n                                    startValue={startValue}\r\n                />\r\n                <SetValueButtons inc={incFunc}\r\n                                 reset={resetFunc}\r\n                                 incDisable={currentValue === maxValue || currentValue === undefined}\r\n                                 resetDisable={currentValue === startValue || currentValue === undefined}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Counter;","import React from 'react';\nimport s from './App.module.css';\nimport Counter from './CounterComponents/Counter/Counter';\n\nfunction App() {\n    return (\n        <div className={s.background}>\n            <Counter/>\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}